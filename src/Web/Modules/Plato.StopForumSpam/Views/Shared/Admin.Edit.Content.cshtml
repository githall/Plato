@model SpamSettingsViewModel
@using Newtonsoft.Json
@{
    var json = JsonConvert.SerializeObject(Model.SpamLevels);
    var platoOpts = GetOptions<PlatoOptions>();
    var isDemo = platoOpts?.DemoMode ?? false;
}

<form asp-route-action="Index" method="post" enctype="multipart/form-data">
    <card>
        <card-title>
            <h6 class="card-title">@T["Settings"]</h6>
        </card-title>
        <card-body>

            <div class="row">
                <div class="col">
                    <fieldset>
                        <div class="form-group" asp-validation-class-for="ApiKey">
                            <label asp-for="@Model.ApiKey">
                                <strong>@T["Api Key"]</strong>
                                <span asp-validation-for="@Model.ApiKey" class="text-danger"></span>
                                <br />
                                <span class="text-muted">@T["Your StopForumSpam.com API key."]</span>
                            </label>
                            <div class="search-input-group">
                                <input asp-for="ApiKey"
                                       type="search" 
                                       class="form-control" 
                                       autocomplete="off"
                                       data-provide="password"
                                       autofocus
                                       placeholder="@T["your StopForumSpam API key..."]" />
                                <button type="button" class="btn btn-secondary" data-toggle="tooltip" title="@T["Toggle Visibility"]" role="button">
                                    <i class="fal fa-eye"></i>
                                </button>
                            </div>

                        </div>
                    </fieldset>

                    <fieldset>
                        <div class="form-group" asp-validation-class-for="SpamLevel">

                            <label asp-for="@Model.SpamLevelId">
                                <strong>@T["Aggression Level"]</strong><br />
                                <span class="text-muted">@T["Customize how aggressively the SPAM filter should act."]</span>
                            </label>
                            <br />
                            <div class="alert">
                                <div class="text-center">
                                    <div id="slider" class="d-inline-block col-9">
                                        <div class="float-left">@T["Low"]</div>
                                        <div class="float-right">@T["High"]</div>
                                        <input asp-for="@Model.SpamLevelId" style="width: 100%;" />
                                        <div id="sliderResults" class="pt-3">
                                            <h6>@Model.SelectedSpamLevel?.Name</h6>
                                            <div class="text-muted">@Model.SelectedSpamLevel?.Description</div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </fieldset>

                    @if (Model.CategorizedSpamOperations.Any())
                    {
                        <h6>@T["Operators"]</h6>
                        @T["Operators allow you to customize how detected SPAM is handled on a per feature basis."]
                        <hr/>
                        @foreach (var category in Model.CategorizedSpamOperations.Keys)
                        {
                            foreach (var operation in Model.CategorizedSpamOperations[category])
                            {
                                var existingOperation = Model.SpamOperations.FirstOrDefault(o => o.Name.Equals(operation.Name, StringComparison.OrdinalIgnoreCase));
                                var contentId = "panel" + operation.Name;
                                var messageId = "message-" + operation.Name;
                                var messageCss = existingOperation == null
                                    ? operation.CustomMessage ? "list-group-item" : "list-group-item hidden"
                                    : existingOperation.CustomMessage ? "list-group-item" : "list-group-item hidden";
                                <fieldset>
                                    <div class="form-group">
                                        <div class="card card-body-flush">
                                            <div class="card-header">
                                                <h6>
                                                    <a data-toggle="collapse" href="#@contentId" aria-expanded="true" aria-controls="collapseOne">
                                                        @T[operation.Title]
                                                    </a>
                                                </h6>
                                                @if (!string.IsNullOrEmpty(operation.Description))
                                                {
                                                    @T[operation.Description]
                                                }
                                            </div>
                                            <div id="@contentId" class="card-body collapse">
                                                <ul class="list-group list-group-flush list-group-hover">
                                                    <li class="list-group-item list-group-item-action">
                                                        <label class="row">
                                                            <span class="col-10">
                                                                <h6>@T["Flag As Spam"]</h6>
                                                                @T["If enabled any entry detected as SPAM will be automatically flagged as SPAM. Entries flagged as SPAM will only be visible to those who have permission to view SPAM."]
                                                            </span>
                                                            <span class="col-2 text-right">
                                                                <span class="switch switch-round">
                                                                    <input class="form-check-input" type="checkbox" value="flagAsSpam" name="flagAsSpam.@operation.Name" checked="@existingOperation?.FlagAsSpam" />
                                                                    <span class="switch-slider"></span>
                                                                </span>
                                                            </span>
                                                        </label>
                                                    </li>
                                                    <li class="list-group-item list-group-item-action">
                                                        <label class="row">
                                                            <span class="col-10">
                                                                <h6>@T["Notify Admins"]</h6>
                                                                @T["If enabled trigger notifications for any entry detected as SPAM to all users within the administrators role with a link to review the entry."]
                                                            </span>
                                                            <span class="col-2 text-right">
                                                                <span class="switch switch-round">
                                                                    <input class="form-check-input" type="checkbox" value="notifyAdmin" name="notifyAdmin.@operation.Name" checked="@existingOperation?.NotifyAdmin" />
                                                                    <span class="switch-slider"></span>
                                                                </span>
                                                            </span>
                                                        </label>
                                                    </li>
                                                    <li class="list-group-item list-group-item-action">
                                                        <label class="row">
                                                            <span class="col-10">
                                                                <h6>@T["Notify Staff"]</h6>
                                                                @T["If enabled trigger notifications for any entry detected as SPAM to all users within the staff role with a link to review the entry."]
                                                            </span>
                                                            <span class="col-2 text-right">
                                                                <span class="switch switch-round">
                                                                    <input class="form-check-input" type="checkbox" value="notifyStaff" name="notifyStaff.@operation.Name" checked="@existingOperation?.NotifyStaff" />
                                                                    <span class="switch-slider"></span>
                                                                </span>
                                                            </span>
                                                        </label>
                                                    </li>
                                                    <li class="list-group-item list-group-item-action">
                                                        <label class="row">
                                                            <span class="col-10">
                                                                <h6>@T["Custom Error"]</h6>
                                                                @T["If enabled when submissions are detected as SPAM the database will not be modified and instead the user will be presented with the provided error message. Disable this option to still allow submissions but optionally flag submissions as SPAM or trigger notifications."]
                                                            </span>
                                                            <span class="col-2 text-right">
                                                                <span class="switch switch-round">
                                                                    <input class="form-check-input toggle-message" data-message-selector='#@messageId' type="checkbox" value="allowAlter" name="allowAlter.@operation.Name" checked="@existingOperation?.CustomMessage" />
                                                                    <span class="switch-slider"></span>
                                                                </span>
                                                            </span>
                                                        </label>
                                                    </li>
                                                    <li id="@messageId" class="@messageCss">
                                                        <label class="row">
                                                            <span class="col-12">
                                                                <h6>@T["Error Message"]</h6>
                                                                @T["Customise the error message presented to end users if there submission is detected as SPAM."]
                                                            </span>
                                                            <span class="col-12 pt-2">
                                                                <textarea rows="6" class="form-control" name="customMessage.@operation.Name">@existingOperation?.Message</textarea>
                                                            </span>
                                                        </label>
                                                    </li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </fieldset>
                            }

                        }
                    }
                    else
                    {
                        <h6>@T["No Operations"]</h6>
                        @T["No spam operations have been registered. At minimum you should enable the Plato.User.StopForumSpam feature."]
                    }

                </div>
            </div>
        
        </card-body>
    </card>

    <card>
        <card-body>
            @if (isDemo)
            {
                <span class="d-inline-block disabled" data-toggle="tooltip" title="@T["This option is disabled within the demo"]">
                    <a href="#" class="btn btn-primary disabled">
                        @T["Save"]
                    </a>
                </span>
            }
            else
            {
                <button class="btn btn-primary" type="submit">@T["Save"]</button>
            }
        </card-body>
    </card>

</form>

<link rel="stylesheet" href="/css/vendors/bootstrap-slider.css" />
<script src="/js/vendors/bootstrap-slider.js" section="Footer"></script>

<script section="Footer">
    
    $(document).ready(function() {
        
        // Get slider
        var $slider = $('#slider').find("input");
        if ($slider.length === 0) {
            return;
        }

        // Prepare slider data
        var data = {
            json: @Html.Raw(json),
            ticks: function() {
                var ticks = [];
                for (var i = 0; i < this.json.length; i++) {
                    ticks.push(this.json[i].id);
                }
                return ticks;
            },
            get: function(id) {
                for (var i = 0; i < this.json.length; i++) {
                    if (this.json[i].id === parseInt(id)) {
                        return this.json[i];
                    }
                }
                return null;
            }
        }

        // Prepare slider
        $slider.slider({
            tooltip: 'always',
            ticks: data.ticks(),
            value: @Model.SpamLevelId.ToString(),
            formatter: function(value) {
                var level = data.get(value);
                if (level == null) {
                    return "";
                }
                return level.name;
            },
            lock_to_ticks: true
        });

        // Slider onChange
        $slider.on("slide",
            function(e) {

                // Get level for selection
                var level = data.get(e.value);
                if (!level) {
                    return;
                }

                // Update text
                var $results = $("#sliderResults");
                if ($results.length > 0) {
                    $results.find("h6").text(level.name);
                    $results.find("div").text(level.description);
                }
             
            });

        // Custom error onChange
        
        $(".toggle-message").each(function() {
            $(this).change(function () {

                var selector = $(this).attr("data-message-selector"),
                    $message = $(selector);
                if ($message.length > 0) {
                    if ($message.hasClass("hidden")) {
                        $message.removeClass("hidden");
                    }

                    if ($(this).prop("checked")) {
                        $message.slideDown();
                    } else {
                        $message.slideUp();
                    }
                }
          

            });

        });


    });

</script>