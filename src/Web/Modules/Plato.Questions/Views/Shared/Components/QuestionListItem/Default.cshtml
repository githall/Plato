@model EntityListItemViewModel<Question>
@{
    var details = Model.Entity.GetOrCreate<QuestionDetails>();
    var voteText = Model.Entity.TotalRatings == 1 ? T["vote"] : T["votes"];
    var answersText = Model.Entity.TotalReplies == 1 ? T["answer"] : T["answers"];
    string voteCss = "votes", answerCss = "answers", ratingCss = "rating";
    if (Model.Entity.TotalReplies > 0)
    {
        answerCss =  "counter-outline-success";
    }
    if (Model.Entity.TotalAnswers > 0)
    {
        answerCss =  "counter-success";
    }
    if (Model.Entity.SummedRating > 0)
    {
        ratingCss = "counter-outline-primary";
    }
    if (Model.Entity.SummedRating < 0)
    {
        ratingCss = "counter-outline-danger";
    }
    if (Model.Entity.SummedRating < -10)
    {
        ratingCss = "counter-danger";
    }
}

<div asp-id="list-left" class="list-left list-left-3x counter-group">
    <div class="counter @voteCss">
        <h6>@Model.Entity.TotalRatings.ToPrettyInt()</h6> @voteText.Value
    </div>
    <div class="counter @answerCss">
        <h6>@Model.Entity.TotalReplies.ToPrettyInt()</h6> @answersText.Value
    </div>
    <div class="counter @ratingCss">
        <h6>@Model.Entity.SummedRating.ToPrettyInt()</h6> @T["rating"]
    </div>
</div>
<div asp-id="list-body" class="list-body">    
    <div class="row no-gutters">
        <div asp-id="header" class="col-12">

            <ol asp-id="icons" class="list-inline text-muted float-right text-right">
                @if (Model.Tags != null)
                {
                    var sb = new System.Text.StringBuilder();
                    var tagList = Model.Tags.ToList();
                    if (tagList.Count > 0)
                    {
                        sb.Append(T["Tags:"].Value).Append(" ");
                        for (var i = 0; i < tagList.Count; i++)
                        {
                            sb.Append(tagList[i].Name);
                            if (i < tagList.Count - 1)
                            {
                                sb.Append(", ");
                            }
                        }
                    }
                    <li class="list-inline-item">
                        <span title="@sb.ToString()" data-toggle="tooltip">
                            @tagList.Count.ToPrettyInt() <i class="fal fa-tag"></i>
                        </span>
                    </li>
                }             
                @if (Model.Entity.TotalViews > 0)
                {
                    <li class="list-inline-item">
                        <span title="@T["Views"]" data-toggle="tooltip">
                            @Model.Entity.TotalViews.ToPrettyInt() <i class="fal fa-eye"></i>
                        </span>
                    </li>
                }
            </ol>

            <a asp-id="title" asp-route-area="Plato.Questions" asp-route-controller="Home" asp-route-action="Display" asp-route-opts.id="@Model.Entity.Id" asp-route-opts.alias="@Model.Entity.Alias" class="font-weight-bold" title="@Model.Entity.Title">@Model.Entity.Title.TrimToAround(75)</a>
            @if (Model.Entity.IsPinned)
            {
                <span title="@T["This question is pinned and is probably important"]" data-toggle="tooltip" class="d-inline-block mx-1">
                    <i class="fal fa-thumbtack"></i>
                </span>
            }
            @if (Model.Entity.IsLocked)
            {
                <span title="@T["This question is locked and is not accepting new answers"]" data-toggle="tooltip" class="d-inline-block mx-1">
                    <i class="fal fa-lock"></i>
                </span>
            }
            @if (Model.Labels != null)
            {
                <span class="pl-2">
                    @foreach (var label in Model.Labels)
                    {
                        <a asp-route-area="Plato.Questions.Labels" asp-route-controller="Home" asp-route-action="Display" asp-route-opts.labelId="@label.Id" asp-route-opts.alias="@label.Alias" title="@label.Description" class="btn btn-xs label font-weight-bold" style="background-color: @label.BackColor; color: @label.ForeColor">
                            @label.Name
                        </a>
                    }
                </span>
            }
        </div>
    </div>
    <div class="row no-gutters">
        <div asp-id="details" class="col-12">
            @if (details?.LatestUsers != null)
            {
                <div class="avatar-group float-right ml-2">
                    @foreach (var user in details.LatestUsers)
                    {
                        var replies = user.TotalReplies == 1
                            ? "reply"
                            : "replies";
                        <a asp-route-area="Plato.Users" asp-route-controller="Home" asp-route-action="Display" asp-route-opts.id="@user.Id" asp-route-opts.alias="@user.Alias"><avatar data-toggle="tooltip" title="@user.DisplayName - @user.TotalReplies.ToPrettyInt() @T[replies]" class="avatar avatar-sm" avatar="@user.Avatar" /></a>
                    }
                </div>
            }

            @if (Model.Entity.LastReplyDate != null)
            {
                <div class="float-right">
                    <a asp-route-area="Plato.Questions" asp-route-controller="Home" asp-route-action="Reply" asp-route-opts.id="@Model.Entity.Id" asp-route-opts.alias="@Model.Entity.Alias" asp-route-opts.replyId="@Model.Entity.LastReplyId" class="@Model.Entity.LastReplyBy?.Css.StaffCss"><date utc="@Model.Entity.LastReplyDate"></date></a>
                </div>
            }
            @if (Model.Entity.CreatedUserId > 0)
            {
                <a asp-route-area="Plato.Users" asp-route-controller="Home" asp-route-action="Display" asp-route-opts.id="@Model.Entity.CreatedUserId" asp-route-opts.alias="@Model.Entity.CreatedBy.Alias" class="@Model.Entity.CreatedBy?.Css.StaffCss">@Model.Entity.CreatedBy.DisplayName</a>
            }
            <date utc="@Model.Entity.CreatedDate" />
            @if (@Model.Category != null)
            {
                <span>@T["in"]</span>
                <a asp-route-area="Plato.Questions.Categories" asp-route-controller="Home" asp-route-action="Index" asp-route-opts.categoryId="@Model.Category.Id" asp-route-opts.alias="@Model.Category.Alias">
                    @Model.Category.Name
                </a>
            }
            @if (Model.Entity.IsPrivate)
            {
                if (Model.Entity.CreatedUserId == base.CurrentUser.Id)
                {
                    <span class="badge badge-warning" data-toggle="tooltip" title="@T["This question is private and only visible as you are the question author"]">@T["Private"]</span>
                }
                else
                {
                    <span class="badge badge-warning" data-toggle="tooltip" title="@T["This question is private and only visible as you have permission to view private questions"]">@T["Private"]</span>
                }
            }
            @if (Model.Entity.IsHidden)
            {
                <span class="badge badge-primary" data-toggle="tooltip" title="@T["This question is hidden and only visible as you have permission to view hidden questions"]">@T["Hidden"]</span>
            }
            @if (Model.Entity.IsSpam)
            {
                <span class="badge badge-info" data-toggle="tooltip" title="@T["This question has been flagged as SPAM and is only visible as you have permission to view questions flagged as SPAM"]">@T["SPAM"]</span>
            }
            @if (Model.Entity.IsDeleted)
            {
                <span class="badge badge-danger" data-toggle="tooltip" title="@T["This question has been deleted and is only visible as you have permission to view deleted questions"]">@T["Deleted"]</span>
            }
        </div>
    </div>
</div>