@model EntityListItemViewModel<Article>
@{
    var details = Model.Entity.GetOrCreate<ArticleDetails>();
}

@if (Model.Category != null)
{
    <div asp-id="list-left" class="list-left">
        <a asp-route-area="Plato.Articles.Categories" asp-route-controller="Home" asp-route-action="Index" asp-route-opts.categoryId="@Model.Category.Id" asp-route-opts.alias="@Model.Category.Alias" data-toggle="tooltip" title="@Model.Category.Name">
            @if (!String.IsNullOrWhiteSpace(Model.Category.IconCss))
            {
                <span class="icon-wrapper icon-wrapper-md" style="background-color: @Model.Category.BackColor; color: @Model.Category.ForeColor">
                    <i class="@Model.Category.IconCss"></i>
                </span>
            }
            else
            {
                <span class="icon-wrapper icon-wrapper-md">
                    <i class="fal fa-folder"></i>
                </span>
            }
        </a>
    </div>
}

<div asp-id="list-body" class="list-body">    
    <div asp-id="header">
        <ol asp-id="icons" class="list-inline float-right text-muted">
            @if (Model.Tags != null)
            {
                var sb = new System.Text.StringBuilder();
                var tagList = Model.Tags.ToList();
                if (tagList.Count > 0)
                {
                    sb.Append(T["Tags:"].Value).Append(" ");
                    for (var i = 0; i < tagList.Count; i++)
                    {
                        sb.Append(tagList[i].Name);
                        if (i < tagList.Count - 1)
                        {
                            sb.Append(", ");
                        }
                    }
                }
                <li class="list-inline-item">
                    <span title="@sb.ToString()" data-toggle="tooltip">
                        @tagList.Count.ToPrettyInt() <i class="fal fa-tag"></i>
                    </span>
                </li>
            }
            @if (Model.Entity.TotalReplies > 0)
            {
                <li class="list-inline-item">
                    <span title="@T["Comments"]" data-toggle="tooltip">
                        @Model.Entity.TotalReplies.ToPrettyInt() <i class="fal fa-comment-alt-lines"></i>
                    </span>
                </li>
            }
            @if (Model.Entity.TotalViews > 0)
            {
                <li class="list-inline-item">
                    <span title="@T["Views"]" data-toggle="tooltip">
                        @Model.Entity.TotalViews.ToPrettyInt() <i class="fal fa-eye"></i>
                    </span>
                </li>
            }
        </ol>
        
        <a asp-id="title" asp-route-area="Plato.Articles" asp-route-controller="Home" asp-route-action="Display" asp-route-opts.id="@Model.Entity.Id" asp-route-opts.alias="@Model.Entity.Alias" class="font-weight-bold">@Model.Entity.Title</a>

        @if (Model.Entity.IsPinned)
        {
            <span title="@T["This article is pinned and is probably important"]" data-toggle="tooltip" class="d-inline-block mx-1">
                <i class="fal fa-thumbtack"></i>
            </span>
        }
        @if (Model.Entity.IsLocked)
        {
            <span title="@T["This article is locked and is not accepting new comments"]" data-toggle="tooltip" class="d-inline-block mx-1">
                <i class="fal fa-lock"></i>
            </span>
        }
        @if (Model.Labels != null)
        {
            <span class="pl-2">
                @foreach (var label in Model.Labels)
                {
                    <a asp-route-area="Plato.Articles.Labels" asp-route-controller="Home" asp-route-action="Display" asp-route-opts.labelId="@label.Id" asp-route-opts.alias="@label.Alias" title="@label.Description" class="btn btn-xs label font-weight-bold" style="background-color: @label.BackColor; color: @label.ForeColor">
                        @label.Name
                    </a>
                }
            </span>
        }
    </div>
    <div asp-id="abstract" class="text-muted">
        @Model.Entity.Abstract
    </div>
    <div asp-id="details">        
        <ul class="list-inline float-right">
            @if (Model.Entity.LastReplyDate != null)
            {
                <li class="list-inline-item">
                    <a asp-route-area="Plato.Docs" asp-route-controller="Home" asp-route-action="Reply" asp-route-opts.id="@Model.Entity.Id" asp-route-opts.alias="@Model.Entity.Alias" asp-route-opts.replyId="@Model.Entity.LastReplyId" class="@Model.Entity.LastReplyBy.Css.StaffCss"><date utc="@Model.Entity.LastReplyDate"></date></a>
                </li>
            }
            @if (details?.LatestUsers != null)
            {
                <li class="list-inline-item">
                    @foreach (var user in details.LatestUsers)
                    {
                        var replies = user.TotalReplies == 1
                            ? "reply"
                            : "replies";
                        <a asp-route-area="Plato.Users" asp-route-controller="Home" asp-route-action="Display" asp-route-opts.id="@user.Id" asp-route-opts.alias="@user.Alias"><avatar data-toggle="tooltip" title="@user.DisplayName - @user.TotalReplies.ToPrettyInt() @T[replies]" class="avatar avatar-sm" avatar="@user.Avatar" /></a>
                    }
                </li>
            }
        </ul>     
        <ul class="list-inline">
            @if (Model.Category != null)
            {
                <li class="list-inline-item">
                    @T["In"]
                    <a asp-route-area="Plato.Articles.Categories" asp-route-controller="Home" asp-route-action="Index" asp-route-opts.categoryId="@Model.Category.Id" asp-route-opts.alias="@Model.Category.Alias">@Model.Category.Name</a>
                </li>
            }
            @if (Model.Entity.ModifiedDate != null)
            {
                <li class="list-inline-item">
                    <date utc="@Model.Entity.ModifiedDate"/>
                </li>
            }
            else
            {
                <li class="list-inline-item">
                    <date utc="@Model.Entity.CreatedDate"/>
                </li>
            }

            @if (Model.Entity.IsPrivate)
            {
                <li class="list-inline-item">
                    @if (Model.Entity.CreatedUserId == base.CurrentUser.Id)
                    {
                        <span class="badge badge-warning" data-toggle="tooltip" title="@T["This article is private and only visible as you are the article author"]">@T["Private"]</span>
                    }
                    else
                    {
                        <span class="badge badge-warning" data-toggle="tooltip" title="@T["This article is private and only visible as you have permission to view private articles"]">@T["Private"]</span>
                    }
                </li>
            }
            @if (Model.Entity.IsHidden)
            {
                <li class="list-inline-item">
                    <span class="badge badge-primary" data-toggle="tooltip" title="@T["This article is hidden and only visible as you have permission to view hidden articles"]">@T["Hidden"]</span>
                </li>
            }
            @if (Model.Entity.IsSpam)
            {
                <li class="list-inline-item">
                    <span class="badge badge-info" data-toggle="tooltip" title="@T["This article has been flagged as SPAM and is only visible as you have permission to view articles flagged as SPAM"]">@T["SPAM"]</span>
                </li>
            }
            @if (Model.Entity.IsDeleted)
            {
                <li class="list-inline-item">
                    <span class="badge badge-danger" data-toggle="tooltip" title="@T["This article has been deleted and is only visible as you have permission to view deleted articles"]">@T["Deleted"]</span>
                </li>
            }
        </ul>
    </div>
</div>
